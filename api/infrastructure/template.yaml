AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: K9 API Backend with Multi-Layer Lambda Architecture

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
    Description: Environment name
  
  CognitoUserPoolId:
    Type: String
    Description: Existing Cognito User Pool ID for authentication
    
  CognitoUserPoolClientId:
    Type: String
    Description: Existing Cognito User Pool Client ID
    
  S3BucketName:
    Type: String
    Description: S3 bucket name for database and file storage

Globals:
  Function:
    Runtime: python3.9
    Timeout: 30
    MemorySize: 256
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
        SIMILARITY_BUCKET: !Ref SimilarityBucket
        EMBEDDINGS_FUNCTION_NAME: !Ref EmbeddingsFunction
        DATABASE_S3_BUCKET: !Ref S3BucketName
        DATABASE_S3_KEY: !Sub "databases/k9_api_${Environment}.db"

Resources:
  # Lambda Layers for Multi-Layer Architecture
  CoreLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "k9-core-${Environment}"
      Description: Core dependencies (boto3, pydantic, jose)
      ContentUri: ../layers/core/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Delete

  DataLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "k9-data-${Environment}"
      Description: Data processing dependencies (duckdb, pandas, numpy)
      ContentUri: ../layers/data/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Delete

  MLLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub "k9-ml-${Environment}"
      Description: Heavy ML dependencies (onnxruntime, opencv, hdbscan)
      ContentUri: ../layers/ml/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Delete

  # S3 Bucket for similarity matrices
  SimilarityBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "k9-similarity-${Environment}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # API Gateway with Cognito Authorization
  K9Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,PATCH,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPoolId}"

  # Lightweight Lambda Functions (Fast startup, low memory)
  
  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "k9-user-${Environment}"
      CodeUri: ../src/handlers/
      Handler: user.handler
      Description: User profile and account management
      Layers:
        - !Ref CoreLayer
        - !Ref DataLayer
      Environment:
        Variables:
          HANDLER_TYPE: user
      Events:
        # GET /user/profile
        GetProfile:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /user/profile
            Method: get
        # PATCH /user/profile  
        UpdateProfile:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /user/profile
            Method: patch
        # POST /user/avatar
        UploadAvatar:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /user/avatar
            Method: post

  ReportsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "k9-reports-${Environment}"
      CodeUri: ../src/handlers/
      Handler: reports.handler
      Description: Reports management and favorites
      Timeout: 60
      Layers:
        - !Ref CoreLayer
        - !Ref DataLayer
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref SimilarityBucket
        - LambdaInvokeFunction:
            FunctionName: !Ref EmbeddingsFunction
      Environment:
        Variables:
          HANDLER_TYPE: reports
      Events:
        # GET /reports
        ListReports:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /reports
            Method: get
        # POST /reports
        CreateReport:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /reports
            Method: post
        # GET /reports/{reportId}
        GetReport:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /reports/{reportId}
            Method: get
        # PATCH /reports/{reportId}
        UpdateReport:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /reports/{reportId}
            Method: patch
        # DELETE /reports/{reportId}
        DeleteReport:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /reports/{reportId}
            Method: delete
        # POST /reports/{reportId}/search
        SearchProducts:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /reports/{reportId}/search
            Method: post
        # GET /reports/{reportId}/products/{productId}
        GetProduct:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /reports/{reportId}/products/{productId}
            Method: get
        # PUT /reports/{reportId}/favorites/{productId}
        UpdateFavoriteStatus:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /reports/{reportId}/favorites/{productId}
            Method: put
        # PUT /reports/{reportId}/favorites
        SyncFavorites:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /reports/{reportId}/favorites
            Method: put
        # GET /reports/{reportId}/export
        ExportFavorites:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /reports/{reportId}/export
            Method: get

  # Heavy ML Lambda Function (High memory, long timeout)
  EmbeddingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "k9-embeddings-${Environment}"
      CodeUri: ../src/handlers/
      Handler: embeddings.handler
      Description: Heavy ML operations for product embeddings
      Timeout: 900  # 15 minutes for heavy ML operations
      MemorySize: 3008  # Maximum memory for ML operations
      Layers:
        - !Ref CoreLayer
        - !Ref DataLayer
        - !Ref MLLayer
      Policies:
        - S3FullAccessPolicy:
            BucketName: !Ref SimilarityBucket
      Environment:
        Variables:
          HANDLER_TYPE: embeddings
      Events:
        # POST /embeddings/compute
        ComputeEmbedding:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /embeddings/compute
            Method: post
        # POST /embeddings/similarity
        ComputeSimilarity:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /embeddings/similarity
            Method: post
        # GET /embeddings/similarity/{productId}
        GetSimilarity:
          Type: Api
          Properties:
            RestApiId: !Ref K9Api
            Path: /embeddings/similarity/{productId}
            Method: get

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL for K9 API"
    Value: !Sub "https://${K9Api}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"

  SimilarityBucketName:
    Description: "S3 bucket for similarity matrices"
    Value: !Ref SimilarityBucket
    Export:
      Name: !Sub "${AWS::StackName}-SimilarityBucket"

  EmbeddingsFunctionName:
    Description: "Embeddings Lambda function name"
    Value: !Ref EmbeddingsFunction
    Export:
      Name: !Sub "${AWS::StackName}-EmbeddingsFunction"

  UserFunctionName:
    Description: "User Lambda function name"
    Value: !Ref UserFunction
    Export:
      Name: !Sub "${AWS::StackName}-UserFunction"

  ReportsFunctionName:
    Description: "Reports Lambda function name"  
    Value: !Ref ReportsFunction
    Export:
      Name: !Sub "${AWS::StackName}-ReportsFunction"